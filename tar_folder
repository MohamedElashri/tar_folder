#!/usr/bin/env bash

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
RESET='\033[0m'

# Function implementation
tar_folder() {
  local folder="$1"
  local output_file="$2"
  local dry_run=false
  local verbose=false
  local quiet=false
  local exclude_patterns=()
  local include_patterns=()
  shift 2

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --exclude=*)
        IFS=',' read -ra patterns <<< "${1#*=}"
        exclude_patterns+=("${patterns[@]}")
        shift
        ;;
      --include=*)
        IFS=',' read -ra patterns <<< "${1#*=}"
        include_patterns+=("${patterns[@]}")
        shift
        ;;
      --dry-run|-n)
        dry_run=true
        shift
        ;;
      --verbose|-v)
        verbose=true
        shift
        ;;
      --quiet|-q)
        quiet=true
        shift
        ;;
      --help|-h)
        echo -e "${CYAN}Usage: tar_folder <folder> [output_file] [options]${RESET}"
        echo -e "${CYAN}Options:${RESET}"
        echo -e "  ${YELLOW}--exclude=<patterns>${RESET}    Exclude files or directories matching the patterns (comma-separated)"
        echo -e "  ${YELLOW}--include=<patterns>${RESET}    Include files or directories matching the patterns (comma-separated)"
        echo -e "  ${YELLOW}--dry-run, -n${RESET}           Perform a dry run without creating the archive"
        echo -e "  ${YELLOW}--verbose, -v${RESET}           Enable verbose output"
        echo -e "  ${YELLOW}--quiet, -q${RESET}             Enable quiet mode (suppress non-essential output)"
        echo -e "  ${YELLOW}--help, -h${RESET}              Show this help message"
        return 0
        ;;
      --version)
        echo -e "${BLUE}tar_folder version 1.0.8${RESET}"
        return 0
        ;;
      *)
        echo -e "${RED}Unknown option: $1${RESET}"
        return 1
        ;;
    esac
  done

  if [ -z "$folder" ]; then
    echo -e >&2 "${RED}Usage: tar_folder <folder> [output_file] [options]${RESET}"
    return 1
  fi

  if [ ! -d "$folder" ]; then
    echo -e >&2 "${RED}Error: $folder is not a valid directory${RESET}"
    return 1
  fi

  if [ -z "$output_file" ]; then
    if [ "$folder" = "." ]; then
      output_file="$(basename "$(pwd)").tar"
    else
      output_file="$(basename "$folder").tar"
    fi
  fi

  # Check if the folder is a git repository
  if [ -d "$folder/.git" ]; then
    local git_ls_files="git -C \"$folder\" ls-files --cached --others --exclude-standard"
  else
    local git_ls_files="find \"$folder\" -type f"
  fi

  local file_list_cmd="$git_ls_files"
  
  if [ ${#include_patterns[@]} -gt 0 ]; then
    file_list_cmd+=" | grep -E '$(IFS='|'; echo "${include_patterns[*]}")'"
  fi

  for pattern in "${exclude_patterns[@]}"; do
    file_list_cmd+=" | grep -v \"$pattern\""
  done

  file_list_cmd+=" | grep -v '^\.git/'"

  local tar_cmd="tar -cf \"$output_file\" --exclude-vcs --exclude-vcs-ignores"
  if ! $quiet; then
    tar_cmd+=" -v"
  fi
  tar_cmd+=" -C \"$folder\" -T -"

  if $verbose; then
    echo -e "${GREEN}Creating tar archive:${RESET} $output_file"
    echo -e "${GREEN}Including files from:${RESET} $folder"
    echo -e "${GREEN}Exclude patterns:${RESET} ${exclude_patterns[*]}"
    echo -e "${GREEN}Include patterns:${RESET} ${include_patterns[*]}"
    echo -e "${GREEN}File list command:${RESET} $file_list_cmd"
    echo -e "${GREEN}Tar command:${RESET} $tar_cmd"
  fi

  if $dry_run; then
    echo -e "${MAGENTA}Dry run:${RESET} $file_list_cmd | $tar_cmd"
  else
    # Create the tar archive
    eval "$file_list_cmd" | eval "$tar_cmd"

    # Create dir_structure.txt
    local dir_structure_file="dir_structure.txt"
    echo "Directory Structure:" > "$dir_structure_file"
    echo "-------------------" >> "$dir_structure_file"
    eval "$file_list_cmd" | sort | sed 's/^/├── /' >> "$dir_structure_file"
    
    # Add dir_structure.txt to the tar archive
    tar -rf "$output_file" -C "$(dirname "$dir_structure_file")" "$(basename "$dir_structure_file")"
    rm "$dir_structure_file"

    if ! $quiet; then
      echo -e "${CYAN}Tar file created:${RESET} $output_file"
      echo -e "${CYAN}Files included:${RESET}"
      eval "$file_list_cmd" | sort | sed 's/^/├── /'
      echo -e "${CYAN}Directory structure added to:${RESET} $dir_structure_file (included in the tar file)"
    fi
  fi
}

# Check if the script is being sourced
if [[ "$0" == "${BASH_SOURCE[0]}" ]]; then
  # Script is being executed directly
  tar_folder "$@"
else
  # Script is being sourced
  echo -e >&2 "${RED}Error: This script must be executed directly, not sourced.${RESET}"
  exit 1
fi
